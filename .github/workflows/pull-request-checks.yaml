name: Pull Request Checks

#
# Documentation:
# https://help.github.com/en/articles/workflow-syntax-for-github-actions
#

on:
  pull_request:
    branches:
      - master

jobs:
  check_version:
    name: Ensure component commits modify component versions
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3.0.2
        name: Checkout repo
        with:
          # See https://github.com/actions/checkout#checkout-v2
          # This will be slow. The intent is to fetch all commits
          # since the merge-base (the commit where we branched off)
          # so we can check the git diff against all changed files.
          # By default, the checkout action only returns the last commit,
          # There's no native way to do this in the checkout action, so 
          # we have to fetch the entire history. See
          # https://github.com/actions/checkout/issues/266#issuecomment-638346893
          fetch-depth: 0
      - uses: jitterbit/get-changed-files@v1
        id: changed_files
        name: Get changed files
      # Diff the changes in the HEAD ref (new branch) against the BASE ref (target branch, e.g. master)
      # If the changes don't contain modifications to the version, we want to log that fact but not exit early
      # Once we've checked all files, exit the script if any files failed to modify version
      - id: git_diff_on_components
        name: Check git diff for version changes
        env:
          head_commit: ${{ github.event.pull_request.head.sha }}
          base_commit: ${{ github.event.pull_request.base.sha }}
        run: |-
          commit_contained_components_that_did_not_modify_version=0
          for f in ${{ steps.changed_files.outputs.all }}
          do
            ext="${f##*.}"
            # Only run this check on modified sources or actions, excluding common files
            if ([[ "$ext" == "js" ]] || [[ "$ext" == "mjs" ]] && [[ "$ext" == "ts" ]]) && \
              ([[ "${f}" == *components/**/sources/* ]] || [[ "${f}" == *components/**/actions/* ]]) && "${f}" != *common*.*ts && \
              [[ "${f}" != *common*.*js ]] && [[ "${f}" != **/actions/common/* ]] && [[ "${f}" != **/sources/common/* ]] && \
              [[ "$(<${f})" == *"version:"* ]]
            then
              BASE_COMMIT=${{env.base_commit}}
              HEAD_COMMIT=${{env.head_commit}}
              DIFF=`git diff --unified=0 $BASE_COMMIT...$HEAD_COMMIT ${f}`
              if [[ ${DIFF} != *"version:"* ]]
              then
                BASE_COMMIT=${{env.base_commit}}
                HEAD_COMMIT=${{env.head_commit}}
                DIFF=`git diff --unified=0 $BASE_COMMIT...$HEAD_COMMIT ${f}`
                if [[ ${DIFF} != *"version:"* ]]
                then
                  echo "You didn't modify the version of ${f}"
                  commit_contained_components_that_did_not_modify_version=1
                fi
              fi
            fi
          done

          if [[ $commit_contained_components_that_did_not_modify_version -eq 1 ]]
          then
            echo "You need to increment the version on some components. Please see the output above and https://pipedream.com/docs/components/guidelines/#versioning for more information"
            exit 1
          fi
        

  spellcheck:
    name: Spellcheck
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3.0.2
      name: Checkout
    - uses: jitterbit/get-changed-files@v1
      id: changed_files
      name: Get changed files
    - id: md_changed_files
      name: Spellcheck Markdown files
      run: |-
        files=''
        for f in ${{ steps.changed_files.outputs.all }}
        do
          ext="${f##*.}"
          if [ $ext = "md" ]
          then
            files="${f} ${files}"
          fi
        done

        echo "files=${files}" >> $GITHUB_ENV
    - uses: rojopolis/spellcheck-github-actions@0.24.0
      name: Spellcheck
      if: ${{ env.files }}
      with:
        source_files: ${{ env.files }}
        task_name: Markdown

  lint:
    name: Lint Code Base
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.0.2
        with:
          # Full git history is needed to get a proper list of changed files
          # within `super-linter`
          fetch-depth: 0
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 7.0.0
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install -r
      - name: Setup Node Env
        uses: actions/setup-node@v3.2.0
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/
          cache: 'pnpm'
      - name: Install Dependencies
        run: npm ci
      - name: Compile TypeScript
        run: npm run build
      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: master
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JAVASCRIPT_ES_CONFIG_FILE: .eslintrc
          LINTER_RULES_PATH: /
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
      - name: Check component keys
        run: node scripts/findBadKeys.js

  pnpm-publish-dry-run:
    name: pnpm publish dry run
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.4.0
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 7.0.0
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - uses: actions/setup-node@v2.5.1
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/
          cache: 'pnpm'
      - name: npm install
        run: npm ci
      - name: pnpm install
        run: pnpm install -r
      # See https://pnpm.io/using-changesets
      - name: Setup npmrc for pnpm publish
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > .npmrc
      - name: pnpm publish
        run: pnpm publish -r --no-git-checks --dry-run

  publish-typescript-components-dry-run:
    name: TypeScript component publish dry run
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.4.0
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 7.0.0
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Setup Node Env
        uses: actions/setup-node@v2.5.1
        with:
          node-version: 14
          registry-url: https://registry.npmjs.org/
          cache: 'pnpm'
      - name: Install Dependencies
        run: npm ci
      - name: pnpm install
        run: pnpm install -r
      - name: Install pd cli
        env:
          PD_API_KEY: ${{ secrets.PD_API_KEY }}
        run: |
          curl -O https://cli.pipedream.com/linux/amd64/latest/pd.zip
          unzip pd.zip
          mkdir -p $HOME/.config/pipedream
          echo "api_key = $PD_API_KEY" > $HOME/.config/pipedream/config
      - name: Compile TypeScript
        id: compile
        run: npm run build > files.txt
      - name: Publish TypeScript components (dry run)
        env:
            PD_API_KEY: ${{ secrets.PD_API_KEY }}
            ENDPOINT: ${{ secrets.ENDPOINT }}
        shell: bash {0} # don't fast fail
        run: |
          IFS=$'\n'
          echo "The following files will be published on merge:"
          # Remove initial tsc output
          for f in $(cat files.txt | sed 1,3d)
          do
            echo "$f"
          done
          UNPUBLISHED=""
          PUBLISHED=""
          ERRORS=""
          SKIPPED=""
          # included in the components dir, ends with .*js (e.g. .js and .mjs) and not app.js,
          # doesn't end with /common*.*js, and doesn't follow */common/
          for f in $(cat files.txt | sed 1,3d); do
            echo "Checking if $f is publishable"
            if [[ $f == */components/* ]] && [[ $f == *.*js ]] && [[ $f != *.app.*js ]] \
              && [[ $f != */common*.*js ]] && [[ $f != */common/* ]]
            then
              echo "attempting to publish ${f}"
              PD_OUTPUT=`./pd publish ${f} --json`
              if [ $? -eq 0 ]
              then
                KEY=`echo $PD_OUTPUT | jq -r ".key"`
                echo "published ${KEY}"
                echo "${KEY} will be added to the registry"
                curl "https://api.pipedream.com/graphql" -H "Content-Type: application/json" -H "Authorization: Bearer ${PD_API_KEY}" --data-binary $'{"query":"mutation($key: String!, $registry: Boolean!, $gitPath: String){\\n  setComponentRegistry(key: $key, registry: $registry, gitPath: $gitPath){\\n    savedComponent{\\n      id\\n      key\\n      gitPath\\n    }\\n  }\\n}","variables":{"key":"'${KEY}'","registry":'true',"gitPath":"'${f}'"}}'
                PUBLISHED+="*${f}"
              else
                ERROR=`echo $PD_OUTPUT | jq -r ".error"`
                ERROR_MESSAGE="${ERROR} with ${f}"
                echo $ERROR_MESSAGE
                ERRORS+="*${ERROR_MESSAGE}"
                UNPUBLISHED+="*${f}"
                # add to array to spit out later
              fi
            else
              echo "${f} will not be added to the registry"
              SKIPPED+="*${f}"
            fi
          done
          # print out everything that didn't publish
          if [ ${#UNPUBLISHED[@]} -ne 0 ]; then
            echo "the following files were not published"
            printf '%s\n' "${UNPUBLISHED[@]}"
          fi
          # curl with form
          curl -X POST -d "skipped=${SKIPPED}" -d "errors=${ERRORS}" -d "unpublished=${UNPUBLISHED}" -d "published=${PUBLISHED}" $ENDPOINT
          unset IFS
      - name: Remove pd cli config
        run: |
          rm $HOME/.config/pipedream/config




